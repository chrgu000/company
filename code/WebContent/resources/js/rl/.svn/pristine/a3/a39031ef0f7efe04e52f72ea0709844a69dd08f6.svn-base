// Spectrum Colorpicker Tests
// https://github.com/bgrins/spectrum
// Author: Brian Grinstead
// License: MIT
module("Initialization"),test("jQuery Plugin Can Be Created",function(){var e=$("<input id='spec' />").spectrum();ok("spec"===e.attr("id"),"Element returned from plugin"),e.spectrum("set","red"),equal(e.spectrum("get").toName(),"red","Basic color setting"),equal(e.spectrum("option","showInput"),!1,"Undefined option is false."),e.spectrum({showInput:!0}),equal(e.spectrum("option","showInput"),!0,"Double initialized spectrum is destroyed before recreating."),e.spectrum("destroy"),equal(e.spectrum("container"),e,"After destroying spectrum, string function returns input.")}),test("Per-element Options Are Read From Data Attributes",function(){var e=$("<input id='spec' data-show-alpha='true' />").spectrum();equal(e.spectrum("option","showAlpha"),!0,"Took showAlpha value from data attribute"),e.spectrum("destroy");var t=$("<input id='spec' data-show-alpha='false' />").spectrum({showAlpha:!0});equal(t.spectrum("option","showAlpha"),!1,"Took showAlpha value from data attribute"),t.spectrum("destroy");var s=$("<input id='spec' />").spectrum({showAlpha:!0});equal(s.spectrum("option","showAlpha"),!0,"Kept showAlpha without data attribute"),s.spectrum("destroy")}),test("Events Fire",function(){var e=$("<input id='spec' />").spectrum(),t=0;expect(5),e.on("beforeShow.spectrum",function(){return 0===t?(ok(!0,"Cancel beforeShow"),t++,!1):(ok(1===t,"Allow beforeShow"),void t++)}),e.on("show.spectrum",function(){ok(2===t,"Show"),t++}),e.on("hide.spectrum",function(){ok(3===t,"Hide"),t++}),e.on("move.spectrum",function(){}),e.on("change",function(){ok(!1,"Change should not fire from `set` call")}),e.spectrum("show"),e.spectrum("show"),e.spectrum("hide"),e.spectrum("set","red"),e.spectrum("destroy");var s=$("<input />").spectrum({showInput:!0});s.on("change.spectrum",function(){ok(!0,"Change should fire input changing")}),s.spectrum("container").find(".sp-input").val("blue").trigger("change"),s.spectrum("destroy")}),module("Defaults"),test("Default Color Is Set By Input Value",function(){var e=$("<input id='spec' value='red' />").spectrum();equal(e.spectrum("get").toName(),"red","Basic color setting");var t=$("<input id='spec' value='not a color' />").spectrum();equal(t.spectrum("get").toHex(),"000000","Defaults to black with an invalid color");var s=$("<input id='spec' />").spectrum();equal(s.spectrum("get").toHex(),"000000","Defaults to black with no value set");var r=$("<input id='spec' />").spectrum({preferredFormat:"hex3"});equal(r.spectrum("get").toHex(!0),"000","Defaults to 3 char hex with no value set"),equal(r.spectrum("get").toString(),"#000","Defaults to 3 char hex with no value set"),e.spectrum("destroy"),t.spectrum("destroy"),s.spectrum("destroy"),r.spectrum("destroy")}),module("Palettes"),test("Palette Events Fire In Correct Order ",function(){expect(2);var e=$("<input id='spec' value='red' />").spectrum({showPalette:!0,palette:[["red","green","blue"]],move:function(){}}),t=0;e.on("move.spectrum",function(){ok(0===t,"move fires before change"),t++}),e.on("change.spectrum",function(){ok(1===t,"change fires after move")}),e.spectrum("container").find(".sp-thumb-el:last-child").click(),e.spectrum("destroy")}),test("Local Storage Is Limited ",function(){var e=$("<input id='spec' value='red' />").spectrum({localStorageKey:"spectrum.tests",palette:[["#ff0","#0ff"]],maxSelectionSize:3});e.spectrum("set","#f00"),e.spectrum("set","#e00"),e.spectrum("set","#d00"),e.spectrum("set","#c00"),e.spectrum("set","#b00"),e.spectrum("set","#a00"),equal(localStorage["spectrum.tests"],"rgb(204, 0, 0);rgb(187, 0, 0);rgb(170, 0, 0)","Local storage array has been limited"),e.spectrum("set","#ff0"),e.spectrum("set","#0ff"),equal(localStorage["spectrum.tests"],"rgb(204, 0, 0);rgb(187, 0, 0);rgb(170, 0, 0)","Local storage array did not get changed by selecting palette items"),e.spectrum("destroy")}),module("Options"),test("replacerClassName",function(){var e=$("<input />").appendTo("body").spectrum({replacerClassName:"test"});ok(e.next(".sp-replacer").hasClass("test"),"Replacer class has been applied"),e.spectrum("destroy").remove()}),test("containerClassName",function(){var e=$("<input />").appendTo("body").spectrum({containerClassName:"test"});ok(e.spectrum("container").hasClass("test"),"Container class has been applied"),e.spectrum("destroy").remove()}),test("Options Can Be Set and Gotten Programmatically",function(){var e=$("<input id='spec' />").spectrum({color:"#ECC",flat:!0,showInput:!0,className:"full-spectrum",showInitial:!0,showPalette:!0,showSelectionPalette:!0,maxPaletteSize:10,preferredFormat:"hex",localStorageKey:"spectrum.example",palette:[["red"],["green"]]}),t=e.spectrum("option");equal(t.flat,!0,"Fetching all options provides accurate value");var s=e.spectrum("option","className");equal(s,"full-spectrum","Fetching a single option returns that value"),e.spectrum("option","className","changed"),s=e.spectrum("option","className"),equal(s,"changed","Changing an option then fetching it is updated");var r=e.spectrum("container").find(".sp-palette-row:not(.sp-palette-row-selection) .sp-thumb-el").length;equal(r,2,"Two palette elements to start"),e.spectrum("option","palette",[["red"],["green"],["blue"]]);var o=e.spectrum("option","palette");deepEqual(o,[["red"],["green"],["blue"]],"Changing an option then fetching it is updated");var r=e.spectrum("container").find(".sp-palette-row:not(.sp-palette-row-selection) .sp-thumb-el").length;equal(r,3,"Three palette elements after updating");var a=$("<input />").spectrum({}),n=$("<div id='c' />").appendTo("body"),p=$("<input />").spectrum({appendTo:n}),u=$("<input />").appendTo("#c").spectrum({appendTo:"parent"}),l=$("<input />").spectrum({appendTo:n,flat:!0});equal(a.spectrum("container").parent()[0],document.body,"Appended to body by default"),equal(p.spectrum("container").parent()[0],n[0],"Can be appended to another element"),equal(l.spectrum("container").parent()[0],$(l).parent()[0],"Flat CANNOT be appended to another element, will be same as input"),equal(u.spectrum("container").parent()[0],n[0],"Passing 'parent' to appendTo works as expected"),equal(e.spectrum("option","showPalette"),!0,"showPalette is true by default"),e.spectrum("option","showPalette",!1),equal(e.spectrum("option","showPalette"),!1,"showPalette is false after setting showPalette"),e.spectrum("option","showPaletteOnly",!0),equal(e.spectrum("option","showPaletteOnly"),!0,"showPaletteOnly is true after setting showPaletteOnly"),equal(e.spectrum("option","showPalette"),!0,"showPalette is true after setting showPaletteOnly"),e.spectrum("destroy"),a.spectrum("destroy"),p.spectrum("destroy"),l.spectrum("destroy"),u.spectrum("destroy").remove(),delete window.localStorage["spectrum.example"]}),test("Show Input works as expected",function(){var e=$("<input />").spectrum({showInput:!0,color:"red"}),t=e.spectrum("container").find(".sp-input");equal(t.val(),"red","Input is set to color by default"),t.val("").trigger("change"),ok(t.hasClass("sp-validation-error"),"Input has validation error class after being emptied."),t.val("red").trigger("change"),ok(!t.hasClass("sp-validation-error"),"Input does not have validation error class after being reset to original color."),equal(e.spectrum("get").toHexString(),"#ff0000","Color is still red"),e.spectrum("destroy")}),test("Tooltip is formatted based on preferred format",function(){function e(){return t.spectrum("container").find(".sp-thumb-el").map(function(){return this.getAttribute("title")}).toArray().join(" ")}var t=$("<input />").spectrum({showInput:!0,color:"rgba(255, 255, 255, .5)",showPalette:!0,palette:[["red","rgba(255, 255, 255, .5)","rgb(0, 0, 255)"]]});equal(e(),"rgb(255, 0, 0) rgba(255, 255, 255, 0.5) rgb(0, 0, 255)","Titles use rgb format by default"),t.spectrum("option","preferredFormat","hex"),equal(e(),"#ff0000 #ffffff #0000ff","Titles are updated to hex"),t.spectrum("option","preferredFormat","hex6"),equal(e(),"#ff0000 #ffffff #0000ff","Titles are updated to hex6"),t.spectrum("option","preferredFormat","hex3"),equal(e(),"#f00 #fff #00f","Titles are updated to hex3"),t.spectrum("option","preferredFormat","name"),equal(e(),"red #ffffff blue","Titles are updated to name"),t.spectrum("option","preferredFormat","hsv"),equal(e(),"hsv(0, 100%, 100%) hsva(0, 0%, 100%, 0.5) hsv(240, 100%, 100%)","Titles are updated to hsv"),t.spectrum("option","preferredFormat","hsl"),equal(e(),"hsl(0, 100%, 50%) hsla(0, 0%, 100%, 0.5) hsl(240, 100%, 50%)","Titles are updated to hsl"),t.spectrum("option","preferredFormat","rgb"),equal(e(),"rgb(255, 0, 0) rgba(255, 255, 255, 0.5) rgb(0, 0, 255)","Titles are updated to rgb"),t.spectrum("destroy")}),module("Methods"),test("Methods work as described",function(){var e=$("<input id='spec' />").spectrum();e.spectrum("show"),ok(e.spectrum("container").is(":visible"),"Spectrum is visible"),e.spectrum("hide"),ok(e.spectrum("container").not(":visible"),"Spectrum is no longer visible"),e.spectrum("toggle"),ok(e.spectrum("container").is(":visible"),"Spectrum is visible after toggle"),e.spectrum("toggle"),ok(e.spectrum("container").not(":visible"),"Spectrum is no longer visible after toggle"),e.spectrum("set","orange");var t=e.spectrum("get","color");ok("#ffa500"==t.toHexString(),"Color has been set and gotten as hex"),ok("orange"==t.toName(),"Color has been set and gotten as name"),ok("hsv(39, 100%, 100%)"==t.toHsvString(),"Color has been set and gotten as hsv"),ok("rgb(255, 165, 0)"==t.toRgbString(),"Color has been set and gotten as rgb"),ok("hsl(39, 100%, 50%)"==t.toHslString(),"Color has been set and gotten as hsl"),ok(e.spectrum("container").hasClass("sp-container"),"Container can be retrieved"),e.spectrum("disable"),ok(e.is(":disabled"),"Can be disabled"),e.spectrum("show"),ok(e.not(":visible"),"Cannot show when disabled"),e.spectrum("enable"),ok(!e.is(":disabled"),"Can be enabled"),e.spectrum("reflow"),raises(function(){e.spectrum("no method")},"Expecting exception to be thrown when calling with no method"),e.spectrum("destroy"),equal(e.spectrum("container"),e,"No usage after being destroyed"),equal(e.spectrum("get"),e,"No usage after being destroyed"),e.spectrum("destroy")}),test("Change events fire as described",function(){expect(0);var e=$("<input />");e.on("change",function(){ok(!1,"Change should not be fired inside of input change")}),e.spectrum({color:"red",change:function(){ok(!1,"Change should not be fired inside of spectrum callback")}}),e.spectrum("set","orange")}),test("The selectedPalette should be updated in each spectrum instance, when storageKeys are identical.",function(){delete window.localStorage["spectrum.tests"];var e="rgb(0, 244, 0)",t=$("<input id='firstEl' value='red' />").spectrum({showPalette:!0,localStorageKey:"spectrum.tests"}),s=$("<input id='secondEl' value='blue' />").spectrum({showPalette:!0,localStorageKey:"spectrum.tests"});t.spectrum("set",e),s.spectrum("toggle");var r=s.spectrum("container").find('span[data-color="'+e+'"]');ok(r.length>0,"Selected color is also shown in the others instance's palette."),delete window.localStorage["spectrum.tests"],t.spectrum("destroy"),s.spectrum("destroy")}),test("The selectedPalette should not be updated in spectrum instances that have different storageKeys.",function(){delete window.localStorage["spectrum.test_1"],delete window.localStorage["spectrum.test_2"];var e="rgb(0, 244, 0)",t=$("<input id='firstEl' value='red' />").spectrum({showPalette:!0,localStorageKey:"spectrum.test_1"}),s=$("<input id='secondEl' value='blue' />").spectrum({showPalette:!0,localStorageKey:"spectrum.test_2"});t.spectrum("set",e),s.spectrum("toggle");var r=s.spectrum("container").find('span[data-color="'+e+'"]');ok(0===r.length,"Selected color should not be available in instances with other storageKey."),t.spectrum("destroy"),s.spectrum("destroy"),delete window.localStorage["spectrum.test_1"],delete window.localStorage["spectrum.test_2"]});