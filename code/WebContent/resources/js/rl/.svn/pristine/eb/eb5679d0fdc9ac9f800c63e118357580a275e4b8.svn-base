/// <reference path="../qunit/qunit.js" />
/// <reference path="../../jsrender.js" />
!function(e,t,r){"use strict";!function(){function e(e){try{return"function"==typeof t.templates(e).fn?"compiled":"failed compile"}catch(r){return r.message}}function a(e){var t="";if(this.tagCtx.props.reverse)if(arguments.length>1)for(r=arguments.length;r;r--)t+=a.call(this,arguments[r-1]);else for(var r=e.length;r;r--)t+=this.tagCtx.render(e[r-1]);else t+=this.tmpl.render(e);return t}var n={name:"Jo"},l=[{name:"Jo"},{name:"Bill"}],s=[{name:"Seattle"},{name:"Paris"},{name:"Delhi"}],p="A_{{:name}}_B";t.views.tags({sort:a}),module("tagParser"),test("{{if}} {{else}}",4,function(){equal(e("A_{{if true}}{{/if}}_B"),"compiled","Empty if block: {{if}}{{/if}}"),equal(e("A_{{if true}}yes{{/if}}_B"),"compiled","{{if}}...{{/if}}"),equal(e("A_{{if true/}}yes{{/if}}_B"),'Syntax error\nUnmatched or missing tag: "{{/if}}" in template:\nA_{{if true/}}yes{{/if}}_B',"unmatched or missing tag error"),equal(t.templates("<span id='x'></span> a'b\"c\\").render(),"<span id='x'></span> a'b\"c\\","Correct escaping of quotes and backslash")}),module("{{if}}"),test("{{if}}",4,function(){equal(t.templates("A_{{if true}}yes{{/if}}_B").render(),"A_yes_B","{{if a}}: a"),equal(t.templates("A_{{if false}}yes{{/if}}_B").render(),"A__B","{{if a}}: !a"),equal(t.templates("A_{{if true}}{{/if}}_B").render(),"A__B","{{if a}}: empty: a"),equal(t.templates("A_{{if false}}{{/if}}_B").render(),"A__B","{{if a}}: empty: !a")}),test("{{if}} {{else}}",9,function(){equal(t.templates("A_{{if true}}yes{{else}}no{{/if}}_B").render(),"A_yes_B","{{if a}} {{else}}: a"),equal(t.templates("A_{{if false}}yes{{else}}no{{/if}}_B").render(),"A_no_B","{{if a}} {{else}}: !a"),equal(t.templates("A_{{if true}}yes{{else true}}or{{else}}no{{/if}}_B").render(),"A_yes_B","{{if a}} {{else b}} {{else}}: a"),equal(t.templates("A_{{if false}}yes{{else true}}or{{else}}no{{/if}}_B").render(),"A_or_B","{{if a}} {{else b}} {{else}}: b"),equal(t.templates("A_{{if false}}yes{{else false}}or{{else}}no{{/if}}_B").render(),"A_no_B","{{if a}} {{else b}} {{else}}: !a!b"),equal(t.templates("A_{{if undefined}}yes{{else true}}or{{else}}no{{/if}}_B").render({}),"A_or_B","{{if undefined}} {{else b}} {{else}}: !a!b"),equal(t.templates("A_{{if false}}yes{{else undefined}}or{{else}}no{{/if}}_B").render({}),"A_no_B","{{if a}} {{else undefined}} {{else}}: !a!b"),equal(t.templates("A_{{if false}}<div title='yes'{{else}}<div title='no'{{/if}}>x</div>_B").render(),"A_<div title='no'>x</div>_B","{{if}} and {{else}} work across HTML tags"),equal(t.templates("A_<div title='{{if true}}yes'{{else}}no'{{/if}}>x</div>_B").render(),"A_<div title='yes'>x</div>_B","{{if}} and {{else}} work across quoted strings")}),test("{{if}} {{else}} external templates",2,function(){equal(t.templates("A_{{if true tmpl='yes<br/>'/}}_B").render(),"A_yes<br/>_B","{{if a tmpl=foo/}}: a"),equal(t.templates("A_{{if false tmpl='yes<br/>'}}{{else false tmpl='or<br/>'}}{{else tmpl='no<br/>'}}{{/if}}_B").render(),"A_no<br/>_B","{{if a tmpl=foo}}{{else b tmpl=bar}}{{else tmpl=baz}}: !a!b")}),module("{{:}}"),test("convert",4,function(){function e(e){switch(e){case"desktop":return"bureau"}}equal(t.templates("{{>#data}}").render("<br/>'\"&"),"&lt;br/&gt;&#39;&#34;&amp;","default html converter"),equal(t.templates("{{html:#data}}").render("<br/>'\"&"),"&lt;br/&gt;&#39;&#34;&amp;","html converter"),equal(t.templates("{{:#data}}").render("<br/>'\"&"),"<br/>'\"&","no convert"),t.views.converters("loc",e),equal(t.templates("{{loc:#data}}:{{loc:'desktop'}}").render("desktop"),"bureau:bureau",'$.views.converters("loc", locFunction);... {{loc:#data}}')}),test("paths",17,function(){equal(t.templates("{{:a}}").render({a:"aVal"}),"aVal","a"),equal(t.templates("{{:a.b}}").render({a:{b:"bVal"}}),"bVal","a.b"),equal(t.templates("{{:a.b.c}}").render({a:{b:{c:"cVal"}}}),"cVal","a.b.c"),equal(t.templates("{{:a.name}}").render({a:{name:"aName"}}),"aName","a.name"),equal(t.templates("{{:a['name']}}").render({a:{name:"aName"}}),"aName","a['name']"),equal(t.templates("{{:a['x - _*!']}}").render({a:{"x - _*!":"aName"}}),"aName","a['x - _*!']"),equal(t.templates("{{:#data['x - _*!']}}").render({"x - _*!":"aName"}),"aName","#data['x - _*!']"),equal(t.templates('{{:a["x - _*!"]}}').render({a:{"x - _*!":"aName"}}),"aName",'a["x - _*!"]'),equal(t.templates("{{:a.b[1].d}}").render({a:{b:[0,{d:"dVal"}]}}),"dVal","a.b[1].d"),equal(t.templates("{{:a.b[1].d}}").render({a:{b:{1:{d:"dVal"}}}}),"dVal","a.b[1].d"),equal(t.templates("{{:a.b[~incr(1-1)].d}}").render({a:{b:{1:{d:"dVal"}}}},{incr:function(e){return e+1}}),"dVal","a.b[~incr(1-1)].d"),equal(t.templates("{{:a.b.c.d}}").render({a:{b:{c:{d:"dVal"}}}}),"dVal","a.b.c.d"),equal(t.templates("{{:a[0]}}").render({a:["bVal"]}),"bVal","a[0]"),equal(t.templates("{{:a.b[1][0].msg}}").render({a:{b:[22,[{msg:" yes - that's right. "}]]}})," yes - that's right. ","a.b[1][0].msg"),equal(t.templates("{{:#data.a}}").render({a:"aVal"}),"aVal","#data.a"),equal(t.templates("{{:#view.data.a}}").render({a:"aVal"}),"aVal","#view.data.a"),equal(t.templates("{{:#index === 0}}").render([{a:"aVal"}]),"true","#index")}),test("types",function(){equal(t.templates("{{:'abc'}}").render(),"abc","'abc'"),equal(t.templates("{{:true}}").render(),"true","true"),equal(t.templates("{{:false}}").render(),"false","false"),equal(t.templates("{{:null}}").render(),"",'null -> ""'),equal(t.templates("{{:199}}").render(),"199","199"),equal(t.templates("{{: 199.9 }}").render(),"199.9","| 199.9 |"),equal(t.templates("{{:-33.33}}").render(),"-33.33","-33.33"),equal(t.templates("{{: -33.33 }}").render(),"-33.33","| -33.33 |"),equal(t.templates("{{:-33.33 - 2.2}}").render(),"-35.53","-33.33 - 2.2"),equal(t.templates("{{:notdefined}}").render({}),"","notdefined")}),test("noerror = true",function(){equal(t.templates("{{:a.b.c.d.e noerror=true}}").render(),"",'{{:a.b.c.d.e noerror=true}} -> ""'),equal(t.templates("{{>a.b.c.d.e noerror=true}}").render(),"",'{{>a.b.c.d.e noerror=true}} -> ""'),equal(t.templates({markup:"{{withfallback:a.b noerror=true fallback='Missing Object'}} and {{withfallback:a noerror=true fallback='xx'}} and {{>a noerror=true}} and {{withfallback:a.x.y noerror=true fallback='xx'}}",converters:{withfallback:function(e){return e||this.tagCtx.props.fallback}}}).render({a:"yes"}),"Missing Object and yes and yes and xx",'{{withfallback:a.b noerror=true fallback="Missing Object"}} -> "Missing Object"')}),test("comparisons",22,function(){equal(t.templates("{{:1<2}}").render(),"true","1<2"),equal(t.templates("{{:2<1}}").render(),"false","2<1"),equal(t.templates("{{:5===5}}").render(),"true","5===5"),equal(t.templates("{{:0==''}}").render(),"true","0==''"),equal(t.templates("{{:'ab'=='ab'}}").render(),"true","'ab'=='ab'"),equal(t.templates("{{:2>1}}").render(),"true","2>1"),equal(t.templates("{{:2 == 2}}").render(),"true","2 == 2"),equal(t.templates("{{:2<=2}}").render(),"true","2<=2"),equal(t.templates("{{:'ab'<'ac'}}").render(),"true","'ab'<'ac'"),equal(t.templates("{{:3>=3}}").render(),"true","3 =3"),equal(t.templates("{{:3>=2}}").render(),"true","3>=2"),equal(t.templates("{{:3>=4}}").render(),"false","3>=4"),equal(t.templates("{{:3 !== 2}}").render(),"true","3 !== 2"),equal(t.templates("{{:3 != 2}}").render(),"true","3 != 2"),equal(t.templates("{{:0 !== null}}").render(),"true","0 !== null"),equal(t.templates("{{:(3 >= 4)}}").render(),"false","3>=4"),equal(t.templates("{{:3 >= 4}}").render(),"false","3>=4"),equal(t.templates("{{:(3>=4)}}").render(),"false","3>=4"),equal(t.templates("{{:(3 < 4)}}").render(),"true","3>=4"),equal(t.templates("{{:3 < 4}}").render(),"true","3>=4"),equal(t.templates("{{:(3<4)}}").render(),"true","3>=4"),equal(t.templates("{{:0 != null}}").render(),"true","0 != null")}),test("array access",function(){equal(t.templates("{{:a[1]}}").render({a:["a0","a1"]}),"a1","a[1]"),equal(t.templates("{{:a[1+1]+5}}").render({a:[11,22,33]}),"38","a[1+1]+5)"),equal(t.templates("{{:a[~incr(1)]+5}}").render({a:[11,22,33]},{incr:function(e){return e+1}}),"38","a[~incr(1)]+5"),equal(t.templates("{{:true && (a[0] || 'default')}}").render({a:[0,22,33]},{incr:function(e){return e+1}}),"default","true && (a[0] || 'default')")}),test("context",5,function(){function e(e,t){return e[t?"toUpperCase":"toLowerCase"]()}equal(t.templates("{{:~val}}").render(1,{val:"myvalue"}),"myvalue","~val"),equal(t.templates("{{:~format(name) + ~format(name, true)}}").render(n,{format:e}),"joJO","render(data, { format: formatFn }); ... {{:~format(name, true)}}"),equal(t.templates("{{for people[0]}}{{:~format(~type) + ~format(name, true)}}{{/for}}").render({people:l},{format:e,type:"PascalCase"}),"pascalcaseJO","render(data, { format: formatFn }); ... {{:~format(name, true)}}"),equal(t.templates("{{for people ~twn=town}}{{:name}} lives in {{:~format(~twn, true)}}. {{/for}}").render({people:l,town:"Redmond"},{format:e}),"Jo lives in REDMOND. Bill lives in REDMOND. ","Passing in context to nested templates: {{for people ~twn=town}}"),equal(t.templates("{{if true}}{{for people}}{{:~root.people[0].name}}{{/for}}{{/if}}").render({people:l}),"JoJo","{{:~root}} returns the top-level data")}),test("values",4,function(){equal(t.templates("{{:a}}").render({a:0}),"0",'{{:0}} returns "0"'),equal(t.templates("{{:a}}").render({}),"","{{:undefined}} returns empty string"),equal(t.templates("{{:a}}").render({a:""}),"","{{:''}} returns empty string"),equal(t.templates("{{:a}}").render({a:null}),"","{{:null}} returns empty string")}),test("expressions",18,function(){equal(e("{{:a++}}"),"Syntax error\na++","a++"),equal(e("{{:(a,b)}}"),"Syntax error\n(a,b)","(a,b)"),equal(t.templates("{{: a+2}}").render({a:2,b:!1}),"4","a+2"),equal(t.templates("{{: b?'yes':'no' }}").render({a:2,b:!1}),"no","b?'yes':'no'"),equal(t.templates("{{:(a||-1) + (b||-1) }}").render({a:2,b:0}),"1","a||-1"),equal(t.templates("{{:3*b()*!a*4/3}}").render({a:!1,b:function(){return 3}}),"12","3*b()*!a*4/3"),equal(t.templates("{{:a%b}}").render({a:30,b:16}),"14","a%b"),equal(t.templates("A_{{if v1 && v2 && v3 && v4}}no{{else !v1 && v2 || v3 && v4}}yes{{/if}}_B").render({v1:!0,v2:!1,v3:2,v4:"foo"}),"A_yes_B","x && y || z"),equal(t.templates("{{:!true}}").render({}),"false","!true"),equal(t.templates("{{if !true}}yes{{else}}no{{/if}}").render({}),"no","{{if !true}}..."),equal(t.templates("{{:!false}}").render({}),"true","!false"),equal(t.templates("{{if !false}}yes{{else}}no{{/if}}").render({}),"yes","{{if !false}}..."),equal(t.templates("{{:!!true}}").render({}),"true","!!true"),equal(t.templates("{{if !!true}}yes{{else}}no{{/if}}").render({}),"yes","{{if !!true}}..."),equal(t.templates("{{:!(true)}}").render({}),"false","!(true)"),equal(t.templates("{{:!true === false}}").render({}),"true","!true === false"),equal(t.templates("{{:false === !true}}").render({}),"true","false === !true"),equal(t.templates("{{:false === !null}}").render({}),"false","false === !null")}),module("{{for}}"),test("{{for}}",17,function(){t.templates({forTmpl:"header_{{for people}}{{:name}}{{/for}}_footer",templateForArray:"header_{{for #data}}{{:name}}{{/for}}_footer",pageTmpl:'{{for [people] tmpl="templateForArray"/}}',simpleFor:"a{{for people}}Content{{:#data}}|{{/for}}b",forPrimitiveDataTypes:"a{{for people}}|{{:#data}}{{/for}}b",testTmpl:"xxx{{:name}} {{:~foo}}"}),equal(t.render.forTmpl({people:l}),"header_JoBill_footer","{{for people}}...{{/for}}"),equal(t.render.templateForArray([l]),"header_JoBill_footer",'Can render a template against an array, as a "layout template", by wrapping array in an array'),equal(t.render.pageTmpl({people:l}),"header_JoBill_footer",'{{for [people] tmpl="templateForArray"/}}'),equal(t.templates("{{for}}xxx{{:name}} {{:~foo}}{{/for}}").render({name:"Jeff"},{foo:"fooVal"}),"xxxJeff fooVal","no parameter - renders once with parent #data context: {{for}}"),equal(t.templates("{{for tmpl='testTmpl'/}}").render({name:"Jeff"},{foo:"fooVal"}),"xxxJeff fooVal",": {{for tmpl=.../}} no parameter - equivalent to {{include tmpl=.../}} - renders once with parent #data context"),equal(t.templates("{{include tmpl='testTmpl'/}}").render({name:"Jeff"},{foo:"fooVal"}),"xxxJeff fooVal","{{include tmpl=.../}} with tmpl parameter - renders once with parent #data context. Equivalent to {{for tmpl=.../}}"),equal(t.templates("{{for missingProperty}}xxx{{:#data===~undefined}}{{/for}}").render({}),"","missingProperty - renders empty string"),equal(t.templates("{{for null}}xxx{{:#data===null}}{{/for}}").render(),"xxxtrue","null - renders once with #data null: {{for null}}"),equal(t.templates("{{for false}}xxx{{:#data}}{{/for}}").render(),"xxxfalse","false - renders once with #data false: {{for false}}"),equal(t.templates("{{for 0}}xxx{{:#data}}{{/for}}").render(),"xxx0","0 - renders once with #data false: {{for 0}}"),equal(t.templates("{{for ''}}xxx{{:#data===''}}{{/for}}").render(),"xxxtrue","'' - renders once with #data false: {{for ''}}"),equal(t.templates("{{for #data}}{{:name}}{{/for}}").render(l),"JoBill","If #data is an array, {{for #data}} iterates"),equal(t.render.simpleFor({people:[]}),"ab","Empty array renders empty string"),equal(t.render.simpleFor({people:["",!1,null,r,1]}),"aContent|Contentfalse|Content|Content|Content1|b","Empty string, false, null or undefined members of array are also rendered"),equal(t.render.simpleFor({people:null}),"aContent|b","null is rendered once with #data null"),equal(t.render.simpleFor({}),"ab","if #data is undefined, renders empty string"),equal(t.render.forPrimitiveDataTypes({people:[0,1,"abc","",,null,!0,!1]}),"a|0|1|abc||||true|falseb","Primitive types render correctly, even if falsey")}),module("{{props}}"),test("{{props}}",15,function(){t.templates({propsTmpl:"header_{{props person}}Key: {{:key}} - Prop: {{:prop}}| {{/props}}_footer",propsTmplObjectArray:"header_{{props people}}Key: {{:key}} - Prop: {{for prop}}{{:name}} {{/for}}{{/props}}_footer",propsTmplPrimitivesArray:"header_{{props people}}Key: {{:key}} - Prop: {{for prop}}{{:name}} {{/for}}{{/props}}_footer",templatePropsArray:"header_{{props #data}}Key: {{:key}} - Prop: {{for prop}}{{:name}} {{/for}}{{/props}}_footer",propTmpl:"Key: {{:key}} - Prop: {{:prop}}",pageTmpl:'{{props person tmpl="propTmpl"/}}',simpleProps:"a{{props people}}Content{{:#data}}|{{/props}}b",propsPrimitiveDataTypes:"a{{props people}}|{{:#data}}{{/props}}b",testTmpl:"xxx{{:name}} {{:~foo}}"}),equal(t.render.propsTmpl({person:l[0]}),"header_Key: name - Prop: Jo| _footer","{{props person}}...{{/props}} for an object iterates over properties"),equal(t.render.propsTmplObjectArray({people:l}),"header_Key: 0 - Prop: Jo Key: 1 - Prop: Bill _footer","{{props people}}...{{/props}} for an array iterates over the array - with index as key and object a prop"),equal(t.render.templatePropsArray([l]),"header_Key: 0 - Prop: Jo Key: 1 - Prop: Bill _footer",'Can render a template against an array, as a "layout template", by wrapping array in an array'),equal(t.render.pageTmpl({person:l[0]}),"Key: name - Prop: Jo",'{{props person tmpl="propTmpl"/}}'),equal(t.templates("{{props}}{{:key}} {{:prop}}{{/props}}").render({name:"Jeff"}),"name Jeff","no parameter - defaults to current data item"),equal(t.templates("{{props foo}}xxx{{:key}} {{:prop}} {{:~foo}}{{/props}}").render({name:"Jeff"}),"","undefined arg - renders nothing"),equal(t.templates("{{props tmpl='propTmpl'/}}").render({name:"Jeff"}),"Key: name - Prop: Jeff",": {{props tmpl=.../}} no parameter - defaults to current data item"),equal(t.templates("{{props null}}Key: {{:key}} - Prop: {{:prop}}| {{/props}}").render(),"","null - renders nothing"),equal(t.templates("{{props false}}Key: {{:key}} - Prop: {{:prop}}| {{/props}}").render(),"","false - renders nothing"),equal(t.templates("{{props 0}}Key: {{:key}} - Prop: {{:prop}}| {{/props}}").render(),"","0 - renders nothing"),equal(t.templates("{{props 'abc'}}Key: {{:key}} - Prop: {{:prop}}| {{/props}}").render(),"","'abc' - renders nothing"),equal(t.templates("{{props ''}}Key: {{:key}} - Prop: {{:prop}}| {{/props}}").render(),"","'' - renders nothing"),equal(t.templates("{{props #data}}Key: {{:key}} - Prop: {{:prop}}| {{/props}}").render(l),"Key: name - Prop: Jo| Key: name - Prop: Bill| ","If #data is an array, {{props #data}} iterates"),equal(t.render.propsTmpl({person:{}}),"header__footer","Empty object renders empty string"),equal(t.render.propsTmpl({person:{zero:0,one:1,str:"abc",emptyStr:"",nullVal:null,trueVal:!0,falseVal:!1}}),"header_Key: zero - Prop: 0| Key: one - Prop: 1| Key: str - Prop: abc| Key: emptyStr - Prop: | Key: nullVal - Prop: | Key: trueVal - Prop: true| Key: falseVal - Prop: false| _footer","Primitive types render correctly, even if falsey")}),module("api"),test("templates",14,function(){var e=t.templates(p);equal(e.render(n),"A_Jo_B","Compile from string: var tmpl = $.templates(tmplString);");var a=e.fn.toString();equal(t.templates("",p).fn.toString()===a&&t.templates(null,p).fn.toString()===a&&t.templates(r,p).fn.toString()===a,!0,'if name is "", null, or undefined, then $.templates(name, tmplString) = $.templates(tmplString);'),t.templates("myTmpl",p),equal(t.render.myTmpl(n),"A_Jo_B",'Compile and register named template: $.templates("myTmpl", tmplString);'),t.templates({myTmpl2:p,myTmpl3:"X_{{:name}}_Y"}),equal(t.render.myTmpl2(n)+t.render.myTmpl3(n),"A_Jo_BX_Jo_Y","Compile and register named templates: $.templates({ myTmpl: tmplString, myTmpl2: tmplString2 });"),t.templates("!'-#==","x"),t.templates({'&^~>"2':"y"}),equal(t.render["!'-#=="](n)+t.render['&^~>"2'](n),"xy","Named templates can have arbitrary names;"),t.templates({myTmpl4:"A_B"}),equal(t.render.myTmpl4(n),"A_B","$.templates({ myTmpl: htmlWithNoTags });"),t.templates({myTmpl5:{markup:p}}),equal(t.render.myTmpl5(n),"A_Jo_B",'$.templates("myTmpl", tmplObjWithMarkupString);'),equal(t.templates("",{markup:p}).render(n),"A_Jo_B",'Compile from template object without registering: $.templates("", tmplObjWithMarkupString);'),t.templates({myTmpl6:{markup:p}}),equal(t.render.myTmpl6(n),"A_Jo_B",'$.templates("myTmpl", tmplObjWithMarkupString);'),t.templates("myTmpl7",e),equal(t.render.myTmpl7(n),"A_Jo_B",'Cloning a template: $.templates("newName", tmpl);'),equal(t.templates("",e)===e,!0,"$.templates(tmpl) returns tmpl"),equal(t.templates("").render(),"",'$.templates("") is a template with empty string as content'),t.templates("myEmptyTmpl",""),equal(t.templates.myEmptyTmpl.render(),"",'$.templates("myEmptyTmpl", "") is a template with empty string as content'),t.templates("myTmpl",null),equal(t.templates.myTmpl,r,'Remove a named template: $.templates("myTmpl", null);')}),test("render",25,function(){var e=t.templates("myTmpl8",p);t.templates({simple:"Content{{:#data}}|",templateForArray:"Content{{for #data}}{{:#index}}{{/for}}{{:~foo}}",primitiveDataTypes:"|{{:#data}}"}),equal(e.render(n),"A_Jo_B","tmpl1.render(data);"),equal(t.render.myTmpl8(n),"A_Jo_B","$.render.myTmpl8(data);"),t.templates("myTmpl9","A_{{for}}inner{{:name}}content{{/for}}_B"),equal(t.templates.myTmpl9.tmpls[0].render(n),"innerJocontent",'Access nested templates: $.templates["myTmpl9[0]"];'),t.templates("myTmpl10","top index:{{:#index}}|{{for 1}}nested index:{{:#get('item').index}}|{{if #get('item').index===0}}nested if index:{{:#get('item').index}}|{{else}}nested else index:{{:#get('item').index}}|{{/if}}{{/for}}"),equal(t.render.myTmpl10(l),"top index:0|nested index:0|nested if index:0|top index:1|nested index:1|nested else index:1|","#get('item').index gives the integer index even in nested blocks"),t.templates("myTmpl11","top index:{{:#index}}|{{for people}}nested index:{{:#index}}|{{if #index===0}}nested if index:{{:#get('item').index}}|{{else}}nested else index:{{:#get('item').index}}|{{/if}}{{/for}}"),equal(t.render.myTmpl11({people:l}),"top index:|nested index:0|nested if index:0|nested index:1|nested else index:1|","#get('item').index gives the integer index even in nested blocks"),t.views.tags({myWrap:{}});var a=t.templates("{{for people}}a{{:#index}} {{if true}}b{{:#index}}{{/if}} c{{:#index}} {{myWrap}}d{{:#index}} {{/myWrap}}{{/for}}");t.views.settings.debugMode(!1),equal(a.render({people:[1,2]}),"a0 b c0 d a1 b c1 d ","If debug mode is false, #index gives empty string in nested blocks. No error message"),t.views.settings.debugMode(!0),equal(a.render({people:[1,2]}),"a0 bUnavailable (nested view): use #getIndex() c0 dUnavailable (nested view): use #getIndex() a1 bUnavailable (nested view): use #getIndex() c1 dUnavailable (nested view): use #getIndex() ","If debug mode is true, #index gives error message in nested blocks.");var s=t.templates("{{for people}}a{{:#getIndex()}} {{if true}}b{{:#getIndex()}}{{/if}} c{{:#getIndex()}} {{myWrap}}d{{:#getIndex()}} {{/myWrap}}{{/for}}");equal(s.render({people:[1,2]}),"a0 b0 c0 d0 a1 b1 c1 d1 ","#getIndex gives inherited index in nested blocks."),t.views.helpers({myKeyIsCorrect:function(){var e=this;return e.parent.views[e._.key]===e}}),t.templates("myTmpl12","{{for people}}nested {{:~myKeyIsCorrect()}}|{{if #index===0}}nested if {{:~myKeyIsCorrect()}}|{{else}}nested else {{:~myKeyIsCorrect()}}|{{/if}}{{/for}}"),equal(t.render.myTmpl12({people:l}),"nested true|nested if true|nested true|nested else true|","view._key gives the key of this view in the parent views collection/object"),equal(t.templates(p).render(n),"A_Jo_B","Compile from string: var html = $.templates(tmplString).render(data);"),equal(t.render.myTmpl8(l),"A_Jo_BA_Bill_B","$.render.myTmpl(array);"),equal(t.render.simple([]),"","Empty array renders empty string"),equal(t.render.simple(["",!1,null,r,1]),"Content|Contentfalse|Content|Content|Content1|","Empty string, false, null or undefined members of array are also rendered"),equal(t.render.simple(null),"Content|","null renders once with #data null"),equal(t.render.simple(),"Content|","Undefined renders once with #data undefined"),equal(t.render.simple(!1),"Contentfalse|","false renders once with #data false"),equal(t.render.simple(0),"Content0|","0 renders once with #data 0"),equal(t.render.simple(""),"Content|",'"" renders once with #data ""'),equal(t.render.templateForArray([[null,r,1]]),"Content012","Can render a template against an array without iteration, by wrapping array in an array"),equal(t.render.templateForArray([null,r,1],!0),"Content012","render(array, true) renders an array without iteration"),equal(t.render.templateForArray([null,r,1],{foo:"foovalue"},!0),"Content012foovalue","render(array, helpers, true) renders an array without iteration, while passing in helpers"),equal(t.render.templateForArray([[]]),"Content","Can render a template against an empty array without iteration, by wrapping array in an array"),equal(t.render.templateForArray([],!0),"Content","Can render a template against an empty array without iteration, by passing in true as second parameter"),equal(t.render.templateForArray([],{foo:"foovalue"},!0),"Contentfoovalue","Can render a template against an empty array without iteration, by by passing in true as third parameter"),equal(t.render.primitiveDataTypes([0,1,"abc","",,!0,!1]),"|0|1|abc|||true|false","Primitive types render correctly, even if falsey")}),test("converters",function(){function e(e){switch(e){case"desktop":return"bureau"}return e}t.views.converters({loc2:e}),equal(t.templates("{{loc2:#data}}:{{loc2:'desktop'}}").render("desktop"),"bureau:bureau","$.views.converters({ loc: locFunction })");var a=t.views.converters("loc",e);equal(a===e&&t.views.converters.loc===e&&t.views.converters.loc2===e,!0,"locFunction === $.views.converters.loc === $.views.converters.loc2"),t.views.converters({loc2:null}),equal(t.views.converters.loc2,r,"$.views.converters({ loc2: null }) to remove registered converter"),equal(t.templates("{{attr:a}}").render({a:0}),"0",'{{attr:0}} returns "0"'),equal(t.templates("{{attr:a}}").render({}),"","{{attr:undefined}} returns empty string"),equal(t.templates("{{attr:a}}").render({a:""}),"","{{attr:''}} returns empty string"),equal(t.templates("{{attr:a}}").render({a:null}),"","{{attr:null}} returns empty string"),equal(t.templates("{{attr:a}}").render({a:"<>&'\""}),"&lt;&gt;&amp;&#39;&#34;",'{{attr:"<>&\'}} returns "&lt;&gt;&amp;&#39;&#34;"'),equal(t.templates("{{>a}}").render({a:0}),"0",'{{>0}} returns "0"'),equal(t.templates("{{>a}}").render({}),"","{{>undefined}} returns empty string"),equal(t.templates("{{>a}}").render({a:""}),"","{{>''}} returns empty string"),equal(t.templates("{{>a}}").render({a:null}),"","{{>null}} returns empty string"),equal(t.templates("{{>a}}").render({a:"<>&'\""}),"&lt;&gt;&amp;&#39;&#34;",'{{>"<>&\'}} returns "&lt;&gt;&amp;&#39;&#34;"'),equal(t.templates("{{loc:a}}").render({a:0}),"0",'{{cnvt:0}} returns "0"'),equal(t.templates("{{loc:a}}").render({}),"","{{cnvt:undefined}} returns empty string"),equal(t.templates("{{loc:a}}").render({a:""}),"","{{cnvt:''}} returns empty string"),equal(t.templates("{{loc:a}}").render({a:null}),"","{{cnvt:null}} returns empty string"),equal(t.templates("{{attr:a}}|{{>a}}|{{loc:a}}|{{:a}}").render({}),"|||","{{attr:undefined}}|{{>undefined}}|{{loc:undefined}}|{{:undefined}} returns correct values"),equal(t.templates("{{attr:a}}|{{>a}}|{{loc:a}}|{{:a}}").render({a:0}),"0|0|0|0","{{attr:0}}|{{>0}}|{{loc:0}}|{{:0}} returns correct values"),equal(t.templates("{{attr:a}}|{{>a}}|{{loc:a}}|{{:a}}").render({a:!1}),"false|false|false|false","{{attr:false}}|{{>false}}|{{loc:false}}|{{:false}} returns correct values")}),test("{{sometag convert=converter}}",function(){function e(e){switch(e){case"desktop":return"bureau";case"a<b":return"a moins <que b"}return e}t.views.converters("loc",e),equal(t.templates("1{{:#data convert='loc'}} 2{{:'desktop' convert='loc'}} 3{{:#data convert=~myloc}} 4{{:'desktop' convert=~myloc}}").render("desktop",{myloc:e}),"1bureau 2bureau 3bureau 4bureau","{{: convert=~myconverter}}"),equal(t.templates("1:{{:'a<b' convert=~myloc}} 2:{{> 'a<b'}} 3:{{html: 'a<b' convert=~myloc}} 4:{{> 'a<b' convert=~myloc}} 5:{{attr: 'a<b' convert=~myloc}}").render(1,{myloc:e}),"1:a moins <que b 2:a&lt;b 3:a&lt;b 4:a&lt;b 5:a moins <que b","{{foo: convert=~myconverter}} convert=converter is used rather than {{foo:, but with {{html: convert=~myconverter}} or {{> convert=~myconverter}} html converter takes precedence and ~myconverter is ignored"),equal(t.templates("{{if true convert=~invert}}yes{{else false convert=~invert}}no{{else}}neither{{/if}}").render("desktop",{invert:function(e){return!e}}),"no","{{if expression convert=~myconverter}}...{{else expression2 convert=~myconverter}}... "),equal(t.templates("{{for #data convert=~reverse}}{{:#data}}{{/for}}").render([1,2,3],{reverse:function(e){return e.reverse()}},!0),"321","{{for expression convert=~myconverter}}")}),test("tags",function(){equal(t.templates("{{sort people reverse=true}}{{:name}}{{/sort}}").render({people:l}),"BillJo","$.views.tags({ sort: sortFunction })"),equal(t.templates("{^{sort people reverse=true}}{^{:name}}{{/sort}}").render({people:l}),"BillJo","Calling render() with inline data-binding {^{...}} renders normally without binding"),equal(t.templates("{{sort people reverse=true towns}}{{:name}}{{/sort}}").render({people:l,towns:s}),"DelhiParisSeattleBillJo","Multiple parameters in arbitrary order: {{sort people reverse=true towns}}"),equal(t.templates("{{sort reverse=false people reverse=true towns}}{{:name}}{{/sort}}").render({people:l,towns:s}),"DelhiParisSeattleBillJo","Duplicate named parameters - last wins: {{sort reverse=false people reverse=true towns}}");var e=t.views.tags("sort2",a);equal(e.render===a&&t.views.tags.sort.render===a&&t.views.tags.sort2.render===a,!0,"sortFunction === $.views.tags.sort.render === $.views.tags.sort2.render"),t.views.tags("sort2",null),equal(t.views.tags.sort2,r,'$.views.tags("sort2", null) to remove registered tag'),t.views.tags("boldTag",{render:function(){return"<em>"+this.tagCtx.render()+"</em>"},template:"{{:#data}}"}),equal(t.templates("{{boldTag}}{{:#data}}{{/boldTag}}").render("theData"),"<em>theData</em>","Data context inside a block tag using tagCtx.render() is the same as the outer context"),equal(t.templates("{{boldTag/}}").render("theData"),"<em>theData</em>","Data context inside the built-in template of a self-closing tag using tagCtx.render() is the same as the outer context"),equal(t.templates("{{sort people reverse=true}}{{:name}}{{/sort}}").render({people:l}),"BillJo","$.views.tags({ sort: sortFunction })");var p="",o=t.templates({markup:"{^{myWidget name/}}",tags:{myWidget:{init:function(){p+=" init"},render:function(e){return p+=" render",e+" "+this.getType()},getType:function(){return p+=" getType",this.type},type:"special"}}}).render(n);equals(o+"|"+p,"Jo special| init render getType","{^{myWidget/}} - Events fire in order during rendering: render, onBeforeLink and onAfterLink"),t.views.tags({noRenderNoTemplate:{},voidRender:function(){},emptyRender:function(){return""},emptyTemplate:{template:""},templateReturnsEmpty:{template:"{{:a}}",autoBind:!0},tagInitIsFalse:{init:!1,render:function(){return"Foo"+JSON.stringify(this.__proto__||{})}},tagInitIsFalseWithTemplate:{init:!1,template:"Foo "}}),equals(t.templates("a{{noRenderNoTemplate/}}b{^{noRenderNoTemplate/}}c{{noRenderNoTemplate}}{{/noRenderNoTemplate}}d{^{noRenderNoTemplate}}{{/noRenderNoTemplate}}e").render(1),"abcde","non-rendering tag (no template, no render function) renders empty string"),equals(t.templates("a{{voidRender/}}b{^{voidRender/}}c{{voidRender}}{{/voidRender}}d{^{voidRender}}{{/voidRender}}e").render(1),"abcde","non-rendering tag (no template, no return from render function) renders empty string"),equals(t.templates("a{{emptyRender/}}b{^{emptyRender/}}c{{emptyRender}}{{/emptyRender}}d{^{emptyRender}}{{/emptyRender}}e").render(1),"abcde","non-rendering tag (no template, empty string returned from render function) renders empty string"),equals(t.templates("a{{emptyTemplate/}}b{^{emptyTemplate/}}c{{emptyTemplate}}{{/emptyTemplate}}d{^{emptyTemplate}}{{/emptyTemplate}}e").render(1),"abcde","non-rendering tag (template has no content, no render function) renders empty string"),equals(t.templates("a{{templateReturnsEmpty/}}b{^{templateReturnsEmpty/}}c{{templateReturnsEmpty}}{{/templateReturnsEmpty}}d{^{templateReturnsEmpty}}{{/templateReturnsEmpty}}e").render(1),"abcde","non-rendering tag (template returns empty string, no render function) renders empty string"),equals(t.views.tags.tagInitIsFalse.constructor===Object&&t.templates("a{{tagInitIsFalse/}}b{^{tagInitIsFalse/}}c{{tagInitIsFalse}}{{/tagInitIsFalse}}d{^{tagInitIsFalse}}{{/tagInitIsFalse}}e").render(1),"aFoo{}bFoo{}cFoo{}dFoo{}e","Tag with init:false renders with render method - and has no prototype or constructor (plain object)"),equals(t.views.tags.tagInitIsFalseWithTemplate.constructor===Object&&t.templates("a{{tagInitIsFalseWithTemplate/}}b{^{tagInitIsFalseWithTemplate/}}c{{tagInitIsFalseWithTemplate}}{{/tagInitIsFalseWithTemplate}}d{^{tagInitIsFalseWithTemplate}}{{/tagInitIsFalseWithTemplate}}e").render(1),"aFoo bFoo cFoo dFoo e","Tag with init:false and template renders template"),t.views.tags({tagJustTemplate:{template:"{{:#data ? name||length : 'Not defined'}} ",autoBind:!0},tagWithTemplateWhichIteratesAgainstCurrentData:{template:"{{:#data ? name : 'Not defined'}} ",render:function(){return this.tagCtx.render()},autoBind:!0},tagJustRender:{render:function(e){return e.name+" "},autoBind:!0},tagJustRenderArray:{render:function(e){return e.length+" "},autoBind:!0},tagWithTemplateNoIteration:{render:function(e){return this.tagCtx.render(e,!0)},template:"{{:#data.length}} ",autoBind:!0},tagWithTemplateNoIterationWithHelpers:{render:function(e){return this.tagCtx.render(e,{foo:"foovalue"},!0)},template:"{{:#data.length}} {{:~foo}}",autoBind:!0},tagWithTemplateWhichIteratesFirstArg:{template:"{{:#data ? name : 'Not defined'}} ",render:function(e){return this.tagCtx.render(e)},autoBind:!0}}),equals(t.templates("a{{include person}}{{tagJustTemplate/}}{{/include}}").render({person:{name:"Jo"}}),"aJo ","Tag with just a template and no param renders once against current data, if object"),equals(t.templates("a{{include person}}{{tagJustTemplate undefinedProperty/}}{{/include}}").render({person:{name:"Jo"}}),"aNot defined ","Tag with just a template and a parameter which is not defined renders once against 'undefined'"),equals(t.templates("a{{include people}}{{tagJustTemplate/}}{{/include}}").render({people:[{name:"Jo"},{name:"Mary"}]}),"a2 ","Tag with just a template and no param renders once against current data, even if array - but can add render method with tagCtx.render(val) to iterate - (next test)"),equals(t.templates("a{{include people}}{{tagWithTemplateWhichIteratesAgainstCurrentData/}}{{/include}}").render({people:[{name:"Jo"},{name:"Mary"}]}),"aJo Mary ","Tag with a template and no param and render method calling tagCtx.render() iterates against current data if array"),equals(t.templates("a{{include people}}{{tagWithTemplateWhichIteratesAgainstCurrentData thisisignored/}}{{/include}}").render({people:[{name:"Jo"},{name:"Mary"}]}),"aJo Mary ","Tag with a template and no param and render method calling tagCtx.render() iterates against current data if array - and ignores argument if provided"),equals(t.templates("a{{include people}}{{tagWithTemplateWhichIteratesFirstArg/}}{{/include}}").render({people:[{name:"Jo"},{name:"Mary"}]}),"aJo Mary ","Tag with a template and no param and render method calling tagCtx.render(val) renders against first arg - or defaults to current data, and iterates if array"),equals(t.templates("a{{tagWithTemplateWhichIteratesFirstArg people/}}").render({people:[{name:"Jo"},{name:"Mary"}]}),"aJo Mary ","Tag with a template and no param and render method calling tagCtx.render(val) iterates against argument if array"),equals(t.templates("a{{include people}}{{tagWithTemplateNoIteration/}}{{/include}}").render({people:[{name:"Jo"},{name:"Mary"}]}),"a2 ","If current data is an array, a tag with a template and a render method calling tagCtx.render(val, true) and no param renders against array without iteration"),equals(t.templates("a{{include people}}{{tagWithTemplateNoIterationWithHelpers/}}{{/include}}").render({people:[{name:"Jo"},{name:"Mary"}]}),"a2 foovalue","If current data is an array, a tag with a template and a render method calling tagCtx.render(val, helpers, true) and no param renders against array without iteration"),equals(t.templates("a{{include person}}{{tagJustRender/}}{{/include}}").render({person:{name:"Jo"}}),"aJo ","Tag with just a render and no param renders once against current data, if object"),equals(t.templates("a{{include people}}{{tagJustRenderArray/}}{{/include}}").render({people:[{name:"Jo"},{name:"Mary"}]}),"a2 ","Tag with just a render and no param renders once against current data, even if array - but render method can choose to iterate"),equals(t.templates("a{{tagJustTemplate person/}}").render({person:{name:"Jo"}}),"aJo ","Tag with just a template and renders once against first argument data, if object"),equals(t.templates("a{{tagJustTemplate people/}}").render({people:[{name:"Jo"},{name:"Mary"}]}),"a2 ","Tag with just a template renders once against first argument data even if it is an array - but can add render method with tagCtx.render(val) to iterate - (next test)"),equals(t.templates("a{{tagWithTemplateWhichIteratesFirstArg people/}}").render({people:[{name:"Jo"},{name:"Mary"}]}),"aJo Mary ","Tag with a template and render method calling tagCtx.render(val) renders against first param data, and iterates if array")
}),test("{{include}} and wrapping content",function(){var e=t.templates({markup:'Before {{include tmpl="wrapper"}}{{:name}}{{/include}} After',templates:{wrapper:"header{{include tmpl=#content/}}footer"}}).render(l);equal(e,"Before headerJofooter AfterBefore headerBillfooter After",'Using {{include ... tmpl="wrapper"}}}wrapped{{/include}}'),e=t.templates({markup:'This replaces:{{myTag override="replacementText" tmpl="wrapper"}}{{:name}}{{/myTag}}This wraps:{{myTag tmpl="wrapper"}}{{:name}}{{/myTag}}',tags:{myTag:{template:"add{{include tmpl=#content/}}",render:function(){return this.tagCtx.props.override},autoBind:!0}},templates:{wrapper:"header{{include tmpl=#content/}}footer"}}).render(l),equal(e,"This replaces:replacementTextThis wraps:headerJofooterThis replaces:replacementTextThis wraps:headerBillfooter",'Custom tag with wrapped content: {{myTag ... tmpl="wrapper"}}wrapped{{/myTmpl}}'),e=t.templates({markup:'Before {{include tmpl="wrapper"}}{{:name}}{{/include}} After',templates:{wrapper:"header{{for people tmpl=#content/}}footer"}}).render({people:l}),equal(e,"Before headerJoBillfooter After",'Using {{for ... tmpl="wrapper"}}}wrapped{{/for}}'),e=t.templates({markup:'This replaces:{{myTag override="replacementText"}}{{:name}}{{/myTag}}This wraps:{{myTag tmpl="wrapper"}}{{:name}}{{/myTag}}',tags:{myTag:{render:function(){return this.tagCtx.props.override},autoBind:!0}},templates:{wrapper:"header{{for people tmpl=#content/}}footer"}}).render({people:l}),equal(e,"This replaces:replacementTextThis wraps:headerJoBillfooter",'Using {{myTag ... tmpl="wrapper"}}wrapped{{/myTmpl}}')}),test("helpers",4,function(){function e(e){return e.toUpperCase()}t.views.helpers({not:function(e){return!e},concat:function(){return"".concat.apply("",arguments)+"top"}}),equal(t.templates("{{:~concat(a, 'b', ~not(false))}}").render({a:"aVal"}),"aValbtruetop","~concat('a')");var a=t.views.helpers("toUpperCase",e);equal(t.templates("{{:~toUpperCase(name)}} {{:~toUpperCase('Foo')}}").render(n),"JO FOO",'$.views.helpers("toUpperCase", toUpperCaseFn);... {{:~toUpperCase(name)}}'),t.views.helpers({toUpperCase2:e}),equal(a===e&&t.views.helpers.toUpperCase===e&&t.views.helpers.toUpperCase2===e,!0,'sortFunction === $.views.helpers.toUpperCase === $.views.helpers("toUpperCase")'),t.views.helpers("toUpperCase2",null),equal(t.views.helpers.toUpperCase2,r,'$.views.helpers("toUpperCase2", null) to remove registered helper')}),test("delimiters",1,function(){t.views.settings.delimiters("@%","%@");var e=t.templates("A_@%if true%@yes@%/if%@_B").render();t.views.settings.delimiters("{{","}}"),equal(e,"A_yes_B","Custom delimiters")}),test("template encapsulation",8,function(){t.templates({myTmpl6:{markup:"{{sort reverse=true people}}{{:name}}{{/sort}}",tags:{sort:a}}}),equal(t.render.myTmpl6({people:l}),"BillJo",'$.templates("myTmpl", tmplObjWithNestedItems);'),t.views.helpers("h1","globalHelper");var e=t.templates({markup:"{{if true}}{{:~h1}} {{:~h2}} {{:~h3}}{{/if}}",helpers:{h2:"templateHelper"}});equal(e.render({},{h3:"optionHelper"}),"globalHelper templateHelper optionHelper","Passing in helpers - global, template or option"),e=t.templates({markup:"{{if true}}{{:~h1}}{{/if}}",helpers:{h1:"templateHelper"}}),equal(e.render({}),"templateHelper","template helper overrides global helper"),e=t.templates({markup:"{{if true}}{{:~h1}}{{/if}}"}),equal(e.render({},{h1:"optionHelper"}),"optionHelper","option helper overrides global helper"),e=t.templates({markup:"{{if true}}{{:~h2}}{{/if}}",helpers:{h2:"templateHelper"}}),equal(e.render({},{h2:"optionHelper"}),"templateHelper","template helper overrides option helper"),t.views.converters("c1",function(e){return e+"globalCvt"}),e=t.templates({markup:"{{if true}}{{c1:1}}{{c2:2}}{{/if}}",converters:{c2:function(e){return e+"templateCvt"}}}),equal(e.render({}),"1globalCvt2templateCvt","template converter and global converter"),e=t.templates({markup:"{{if true}}{{c1:1}}{{/if}}",converters:{c1:function(e){return e+"templateCvt"}}}),equal(e.render({}),"1templateCvt","template converter overrides global converter"),e=t.templates({cascade:"outerCascade",nesting:{markup:"{{if true}} {{c1:~h1}} {{include tmpl='inner'/}}{{/if}} {{include tmpl='cascade'/}}",helpers:{h1:"templateHelper"},converters:{c1:function(e){return e+" templateCvt"}},templates:{cascade:"innerCascade",inner:{markup:"{{if true}}{{c1:~h1}}{{/if}} {{include tmpl='cascade'/}}",helpers:{h1:"innerTemplateHelper"},converters:{c1:function(e){return e+" innerTemplateCvt"}},templates:{cascade:"innerInnerCascade"}}}}}),equal(t.templates.nesting.render({},{b:"optionHelper"})," templateHelper templateCvt innerTemplateHelper innerTemplateCvt innerInnerCascade innerCascade","Inner template, helper, and converter override outer template, helper, and converter")})}()}(this,this.jsviews);